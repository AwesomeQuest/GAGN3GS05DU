library(dplyr)
library(mongolite)
db <- mongo(collection = "data", db = "covid19", url = "mongodb://localhost:27017")
data <- db$find()
df <- data.frame(data)
df <- transform(df, dateRep = as.Date(dateRep, format="%d/%m/%Y"))
# 1
dateSort <- df[order(df$dateRep),]
dateSums <- ddply(dateSort,.(dateRep),summarize, cases=sum(as.numeric(cases)),deaths=sum(as.numeric(deaths)))
plot(dateSums$dateRep, dateSums$deaths)
library(dplyr)
library(mongolite)
db <- mongo(collection = "data", db = "covid19", url = "mongodb://localhost:27017")
data <- db$find()
df <- data.frame(data)
df <- transform(df, dateRep = as.Date(dateRep, format="%d/%m/%Y"))
# 1
dateSort <- df[order(df$dateRep),]
dateSums <- ddply(dateSort,.(dateRep),summarize, cases=sum(as.numeric(cases)),deaths=sum(as.numeric(deaths)))
detach("package:dplyr", unload = TRUE)
library(plyr)
library(plyr)
library(mongolite)
db <- mongo(collection = "data", db = "covid19", url = "mongodb://localhost:27017")
data <- db$find()
df <- data.frame(data)
df <- transform(df, dateRep = as.Date(dateRep, format="%d/%m/%Y"))
# 1
dateSort <- df[order(df$dateRep),]
dateSums <- ddply(dateSort,.(dateRep),summarize, cases=sum(as.numeric(cases)),deaths=sum(as.numeric(deaths)))
plot(dateSums$dateRep, dateSums$deaths)
dateSort
# 2
changeData <- mutate(dateSort, 1)
changeData
db <- mongo(collection = "data", db = "covid19", url = "mongodb://localhost:27017")
data <- db$find()
df <- data.frame(data)
df <- transform(df, dateRep = as.Date(dateRep, format="%d/%m/%Y"))
# 1
dateSort <- df[order(df$dateRep),]
dateSums <- ddply(dateSort,.(dateRep),summarize, cases=sum(as.numeric(cases)),deaths=sum(as.numeric(deaths)))
plot(dateSums$dateRep, dateSums$deaths)
# 2
changeData <- mutate(dateSort, 1)
changeData
db <- mongo(collection = "data", db = "covid19", url = "mongodb://localhost:27017")
data <- db$find()
df <- data.frame(data)
df <- transform(df, dateRep = as.Date(dateRep, format="%d/%m/%Y"))
# 1
dateSort <- df[order(df$dateRep),]
dateSums <- ddply(dateSort,.(dateRep),summarize, cases=sum(as.numeric(cases)),deaths=sum(as.numeric(deaths)))
plot(dateSums$dateRep, dateSums$deaths)
dateSort <- data.table(dateSort)
library(data.table)
dateSort <- as.data.table(dataSort)
library(plyr)
library(mongolite)
library(data.table)
db <- mongo(collection = "data", db = "covid19", url = "mongodb://localhost:27017")
data <- db$find()
df <- data.frame(data)
df <- transform(df, dateRep = as.Date(dateRep, format="%d/%m/%Y"))
# 1
dateSort <- df[order(df$dateRep),]
dateSums <- ddply(dateSort,.(dateRep),summarize, cases=sum(as.numeric(cases)),deaths=sum(as.numeric(deaths)))
plot(dateSums$dateRep, dateSums$deaths)
dateSort <- as.data.table(dateSort)
changeData <- dateSort[, change := cases + shift(cases, 1L, type = "lag")]
changeData <- dateSort[, change := as.numeric(cases + shift(cases, 1L, type = "lag"))]
changeData <- dateSort[, change := 1]
changeData
changeData
# 2
dateSort <- as.data.table(dateSort)
dateSort
dateSort
# 2
dateSort <- as.data.table(dateSort)
# 1
dateSort <- df[order(df$dateRep),]
dateSums <- ddply(dateSort,.(dateRep),summarize, cases=sum(as.numeric(cases)),deaths=sum(as.numeric(deaths)))
plot(dateSums$dateRep, dateSums$deaths)
# 2
dateSort <- as.data.table(dateSort)
dateSort
changeData <- dateSort[, change := 1]
changeData
changeData <- dateSort[, change := 1]
changeData
changeData
dateSort
# 1
dateSort <- df[order(df$dateRep),]
dateSums <- ddply(dateSort,.(dateRep),summarize, cases=sum(as.numeric(cases)),deaths=sum(as.numeric(deaths)))
plot(dateSums$dateRep, dateSums$deaths)
changeData[, change := cases + shift(cases, 1L, type = "lag")]
changeData[, change := cases + shift(cases)]
changeData[, change := cases]
changeData
# 2
changeData <- as.data.table(dateSort)
shiftCases <- rbind(0, changeData$cases)
shiftCases
shiftCases <- rbind(c(0), changeData$cases)
shiftCases
changeData[, change := cases / shiftCases]
changeData[, change := as.numeric(cases) / as.numeric(shiftCases) ]
changeData[, change := as.numeric(cases) / as.numeric(shiftCases)]
changeData[, change := rep(as.numeric(cases) / as.numeric(shiftCases))]
changeData$cases
shiftCases <- rbind(c(1), changeData$cases)
shiftCases
shiftCases[1]
shiftCases[2]
changeData$cases[1]
shiftCases[2]
changeData$cases[1]
changeData[, change := as.double(cases) / as.double(shiftCases)]
shiftCases / changeData$cases
as.double(cases) / as.double(shiftCases)
changeData
as.double(changeData$cases) / as.double(shiftCases)
changeData <- transform(changeData, change = as.double(cases) / as.double(shiftCases))
changeData
# 2
changeData <- dateSort
shiftCases <- rbind(c(1), changeData$cases)
changeData <- transform(changeData, change = as.double(cases) / as.double(shiftCases))
changeData
changeData[10000]
changeData[,10000]
changeData[,1000]
changeData[1000]
changeData <- transform(changeData, change = as.double(cases) / as.double(shiftCases))
changeData
# 2
changeData <- dateSort
shiftdata <- rbind(c(1), changeData$cases)
changeData <- transform(changeData,
changeCases = as.double(cases) / as.double(shiftdata))
shiftdata <- rbind(c(1), changeData$deaths)
changeData <- transform(changeData,
changeCases = as.double(deaths) / as.double(shiftdata))
changeData
# 2
changeData <- dateSort
shiftdata <- rbind(c(1), changeData$cases)
changeData <- transform(changeData,
changeCases = as.double(cases) / as.double(shiftdata))
shiftdata <- rbind(c(1), changeData$deaths)
changeData <- transform(changeData,
changeDeaths = as.double(deaths) / as.double(shiftdata))
changeData
